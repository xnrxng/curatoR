[{"path":[]},{"path":"https://xnrxng.github.io/curatoR/CODE_OF_CONDUCT.html","id":"statement-on-diversity-equity-and-inclusion","dir":"","previous_headings":"","what":"Statement on Diversity, Equity, and Inclusion","title":"Code of Conduct","text":"UBC students hail diverse range backgrounds experiences. promote safe inclusive working environment, pledge making project harassment-free regardless age, race, gender, religion. People represent project, either officially unofficially, must follow code conduct.","code":""},{"path":"https://xnrxng.github.io/curatoR/CODE_OF_CONDUCT.html","id":"expected-behaviour","dir":"","previous_headings":"","what":"Expected Behaviour","title":"Code of Conduct","text":"Examples Acceptable Behaviour * Using welcoming inclusive language * respectful differing perspectives experiences * open collaborative * Accepting constructive criticism tactfully * Ask help unsure Examples Unacceptable Behaviour * Insulting, derogatory, hateful language * Harassment * Trolling * Publishing sensitive information without explicit permission * Deliberate intimidation, stalking, following * Violent threats language directed another person * Incitement violence harassment towards individual * Sexual language imagery * conduct inappropriate professional audience","code":""},{"path":"https://xnrxng.github.io/curatoR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Code of Conduct","text":"Incidents may reported directly Pavlidis Lab.","code":""},{"path":"https://xnrxng.github.io/curatoR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct inspired tidyverse Code Conduct, adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4.","code":""},{"path":"https://xnrxng.github.io/curatoR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"curatoR Contributing Guideline","title":"curatoR Contributing Guideline","text":"guide describes propose change project. welcome input, ideas, feedback project. Whether bug fix, new function, new feature. Please aware contributions accepted Project’s licence.","code":""},{"path":"https://xnrxng.github.io/curatoR/CONTRIBUTING.html","id":"changes","dir":"","previous_headings":"","what":"Changes","title":"curatoR Contributing Guideline","text":"Create issue contributors may review agree needed- Set repository: clone repository git clone git@github.com:xnrxng/curatoR.git navigate root repository cd. Create unique branch git switch -c <-branch>. contribution added, commit push changes branch : Please submit pull request GitHub contributors may review changes merging branch back main.","code":"git add <modified-file> git commit -m \"Some descriptive message about your change\" git push origin <your-branch>"},{"path":"https://xnrxng.github.io/curatoR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"curatoR Contributing Guideline","text":"Please note project follows Code Conduct. must abide terms contribute project.","code":""},{"path":"https://xnrxng.github.io/curatoR/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"curatoR Contributing Guideline","text":"contributing guide inspired dplyr contributing guide, available .","code":""},{"path":"https://xnrxng.github.io/curatoR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 curatoR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"load_w_new_col","dir":"Articles","previous_headings":"","what":"1. load_w_new_col()","title":"curatoR tutorial","text":"Loads dataset URL changes column names. function takes 3 parameters: dataset_path: URL dataset interest string. col_names: vector strings column names. delimiter: dataset’s delimiter string. show example use function URL leads mtcars dataset. information mtcars available ?mtcars. Note output tibble.","code":"dataset_url <- \"https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv\"  new_col_names <- c(\"model\", \"milespergallon\", \"cylinder_number\", \"displacement\", \"horsepower\", \"rear_axle_ratio\", \"weight\", \"quartermiletime\", \"engine\", \"transmission\", \"forwardgears\", \"carb\")  comma_delimiter <- \",\"  loaded_dataset <- load_w_new_col(dataset_url, new_col_names, comma_delimiter) #> Rows: 32 Columns: 12 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): manufacturer #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  # head() loads the first 6 rows of the tibble head(loaded_dataset) #> # A tibble: 6 × 12 #>   model   milespergallon cylinder_number displacement horsepower rear_axle_ratio #>   <chr>            <dbl>           <dbl>        <dbl>      <dbl>           <dbl> #> 1 Mazda …           21                 6          160        110            3.9  #> 2 Mazda …           21                 6          160        110            3.9  #> 3 Datsun…           22.8               4          108         93            3.85 #> 4 Hornet…           21.4               6          258        110            3.08 #> 5 Hornet…           18.7               8          360        175            3.15 #> 6 Valiant           18.1               6          225        105            2.76 #> # ℹ 6 more variables: weight <dbl>, quartermiletime <dbl>, engine <dbl>, #> #   transmission <dbl>, forwardgears <dbl>, carb <dbl>"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"create_combined_matrix","dir":"Articles","previous_headings":"","what":"2. create_combined_matrix()","title":"curatoR tutorial","text":"Authors usually provide matrix three files: barcodes.tsv, features.tsv, matrix.mtx. function combines matrix appropriate genes rows barcodes columns. function takes 2 parameters: specimenIDS: character vector specimen IDs. ID corresponds subdirectory file prefix data directory. initial_path: string specifying base path data directory containing subdirectories files specimen. example, files “data/data_raw/”, initial path. case, files named “Patient1barcodes.tsv”, “Patient1features.tsv” “Patient1matrix.mtx”. found “tests/testthat/files_helpers/” folder. Thus, initial_path. Note final output list matrices.","code":"initial_path <- paste0(system.file(\"extdata/\", package = \"curatoR\"), \"/\") specimenIDs <- c(\"Patient1\", \"Patient2\") combined_matrices <- create_combined_matrix(specimenIDs, initial_path)  print(combined_matrices$Patient1) #> 3 x 3 sparse Matrix of class \"dgTMatrix\" #>       Barcode1 Barcode2 Barcode3 #> gene1        1        .        . #> gene2        .        2        4 #> gene3        3        .        5 print(combined_matrices$Patient2) #> 3 x 3 sparse Matrix of class \"dgTMatrix\" #>       Barcode1 Barcode2 Barcode3 #> gene1        1        .        . #> gene2        .        2        4 #> gene3        3        .        5"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"generate_cell_types","dir":"Articles","previous_headings":"","what":"3. generate_cell_types()","title":"curatoR tutorial","text":"authors provide matrices without unique cell IDs, function creates unique cell IDs cell well sorts matrices cell type. function takes 3 parameters: cell_types: Vector cell types process (e.g., c(“T_cells”, “B_cells”)). sample_list: List matrices rows genes columns cells. matrix column names indicating cell types. Genes (number order) matrices. prefix: Prefix include column names output. Note output list matrices, matrix corresponds cell type.","code":"sample1 <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"T_cells\", \"B_cells\")))  sample2 <- matrix(c(7, 8, 9, 10, 11, 12), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"T_cells\", \"B_cells\")))  sample_list <- list(sample1, sample2)  cell_types <- c(\"T_cells\", \"B_cells\")  prefix <- \"Sample_\"  ct_list <- generate_cell_types(cell_types, sample_list, prefix)  print(ct_list$T_cells) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>       Sample_T_cells_Sample1_1 Sample_T_cells_Sample2_2 #> Gene1                        1                        7 #> Gene2                        2                        8 #> Gene3                        3                        9 print(ct_list$B_cells) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>       Sample_B_cells_Sample1_1 Sample_B_cells_Sample2_2 #> Gene1                        4                       10 #> Gene2                        5                       11 #> Gene3                        6                       12"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"generate_cell_types_w_barcodes","dir":"Articles","previous_headings":"","what":"4. generate_cell_types_w_barcodes()","title":"curatoR tutorial","text":"want categorize matrices based cell types, barcodes linked cell types, can use function. function takes 3 parameters: cell_types: Vector cell types process (e.g., c(“T_cells”, “B_cells”)). sample_list: List matrices rows genes columns cells. matrix column names indicating cell types. Genes (number order) matrices. cell_IDs: dataframe two columns: “cell_type” “cell_ID”. Note output list sparse matrices (one cell type cell_types), cell IDs column names shared row names.","code":"cell_IDs <- data.frame( cell_type = c(\"T_cells\", \"B_cells\", \"T_cells\", \"B_cells\", \"T_cells\", \"T_cells\", \"B_cells\", \"B_cells\"), cell_ID = c(\"Cell1\", \"Cell2\", \"Cell3\", \"Cell4\", \"Cell5\", \"Cell6\", \"Cell7\", \"Cell8\"))  sample1 <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"Cell1\", \"Cell2\", \"Cell3\", \"Cell4\")))  sample2 <- matrix( c(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"Cell5\", \"Cell6\", \"Cell7\", \"Cell8\")))  sample_list <- list(sample1, sample2)  cell_types <- c(\"T_cells\", \"B_cells\")  barcodes_list <- generate_cell_types_w_barcodes(cell_types, sample_list, cell_IDs)  print(barcodes_list$T_cells) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>       Cell1 Cell3 Cell5 Cell6 #> Gene1     1     7    13    16 #> Gene2     2     8    14    17 #> Gene3     3     9    15    18 print(barcodes_list$B_cells) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>       Cell2 Cell4 Cell7 Cell8 #> Gene1     4    10    19    22 #> Gene2     5    11    20    23 #> Gene3     6    12    21    24"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"cleanctmat","dir":"Articles","previous_headings":"","what":"5. cleanCtmat()","title":"curatoR tutorial","text":"function filters matrix based expression levels. function takes 3 parameters: ctmat: numeric matrix rows represent genes columns represent samples (e.g., cells). geneThr: numeric value 0 1 specifying minimum proportion cells gene must expressed retained. default 0.02. sampleThr: numeric value 0 1 specifying minimum rank percentile number genes expressed sample retain sample. default 0.05. returns filtered matrix.","code":"set.seed(123) ctmat <- matrix(sample(c(0, 1, 2, 3), 30, replace = TRUE), nrow = 5, ncol = 6, dimnames = list( paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:6)))  cleaned_mm <- cleanCtmat(ctmat)  print(cleaned_mm) #>       Cell1 Cell2 Cell3 Cell4 Cell6 #> Gene1     2     1     3     2     2 #> Gene2     2     1     1     3     3 #> Gene3     2     1     1     0     1 #> Gene4     1     2     0     2     2 #> Gene5     2     0     1     2     1"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"do_cpm_log","dir":"Articles","previous_headings":"","what":"6. do_cpm_log()","title":"curatoR tutorial","text":"function CPM normalizes matrix. also optionally log transforms . function takes 2 parameters: mtx: matrix. log: TRUE FALSE. Whether log-transform matrix well. Default false. returns transformed matrix.","code":"set.seed(123) ctmat <- matrix(sample(c(0, 1, 2, 3), 30, replace = TRUE), nrow = 5, ncol = 6, dimnames = list( paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:6)))  cpmlogged <- do_cpm_log(ctmat, log = TRUE)  print(cpmlogged) #>          Cell1    Cell2    Cell3    Cell4    Cell5    Cell6 #> Gene1 12.31144 12.20608 13.12237 12.31144  0.00000 12.31144 #> Gene2 12.31144 12.20608 12.02376 12.71690 13.81551 12.71690 #> Gene3 12.31144 12.20608 12.02376  0.00000  0.00000 11.61829 #> Gene4 11.61829 12.89922  0.00000 12.31144  0.00000 12.31144 #> Gene5 12.31144  0.00000 12.02376 12.31144  0.00000 11.61829"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"create_pseudobulk","dir":"Articles","previous_headings":"","what":"7. create_pseudobulk()","title":"curatoR tutorial","text":"function creates pseudobulk expression matrix. function takes 2 parameters: expr: Expression matrix columns cell IDs rows gene names. meta: Dataframe row represent cell. Cell IDs rownames. needs columns “patientID”, “disorder”, “sex”, “age”. “disorder” values “yes” “”. returns list composed pseudobulk well associated metadata.","code":"set.seed(123) expr <- matrix(sample(0:10, 50, replace = TRUE),                 nrow = 5, ncol = 10,                 dimnames = list(paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:10)))  meta <- data.frame(   patientID = c(\"P1\", \"P2\", \"P3\", \"P1\", \"P1\", \"P2\", \"P2\", \"P3\", \"P3\", \"P1\"),   disorder = c(\"yes\", \"no\", \"no\", \"yes\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"yes\"),   sex = c(\"male\", \"female\", \"female\", \"male\", \"male\", \"female\", \"female\", \"female\", \"female\", \"male\"),   age = c(70, 68, 64, 70, 70, 68, 68, 64, 64, 70),   row.names = paste0(\"Cell\", 1:10) )  pseudo_bulk <- create_pseudo_bulk(expr, meta)  print(pseudo_bulk$meta) #>              group_sample       group patientID disorder    sex age #> 1  patientIDP2:disorderno  disorderno        P2       no female  68 #> 2  patientIDP3:disorderno  disorderno        P3       no female  64 #> 3 patientIDP1:disorderyes disorderyes        P1      yes   male  70 print(pseudo_bulk$expr) #>       patientIDP2:disorderno patientIDP3:disorderno patientIDP1:disorderyes #> Gene1                     22                     25                      26 #> Gene2                     10                     25                      17 #> Gene3                     21                     16                      26 #> Gene4                     19                      9                      19 #> Gene5                     21                     18                      24"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"perform_dge","dir":"Articles","previous_headings":"","what":"8. perform_DGE()","title":"curatoR tutorial","text":"function TMM normalizes pseudobulk matrix performs DEA edgeR package. function takes 2 parameters: PB: output create_pseudobulk. design: specify groups interest. E.g. design <- model.matrix(~ group, data = PB$meta) returns DEA results.","code":"design <- model.matrix(~ group, data = pseudo_bulk$meta)  res <- perform_DGE(pseudo_bulk, design)  print(res) #>    gene         logFC   logCPM           LR    PValue       FDR #> 1 Gene2 -0.3563918390 17.52844 2.104152e-01 0.6464422 0.9993739 #> 2 Gene1 -0.1532864102 17.96376 1.923554e-01 0.6609634 0.9993739 #> 3 Gene3  0.1917995995 17.75488 1.617865e-01 0.6875171 0.9993739 #> 4 Gene4  0.1513627368 17.37293 3.323124e-02 0.8553517 0.9993739 #> 5 Gene5  0.0003725106 17.76122 6.157728e-07 0.9993739 0.9993739 #>               test #> 1 pseudobulk_edgeR #> 2 pseudobulk_edgeR #> 3 pseudobulk_edgeR #> 4 pseudobulk_edgeR #> 5 pseudobulk_edgeR"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"limma_dge","dir":"Articles","previous_headings":"","what":"9. limma_dge()","title":"curatoR tutorial","text":"function CPMLog normalizes pseudobulk matrix performs DEA limma package. function takes 2 parameters: PB: output create_pseudobulk. design: specify groups interest. E.g. design <- model.matrix(~ group, data = PB$meta)","code":"design <- model.matrix(~ group, data = pseudo_bulk$meta)  res_limma <- limma_dge(design, pseudo_bulk) #> Removing intercept from test coefficients  print(res_limma) #>             logFC  AveExpr          t   P.Value adj.P.Val         B #> Gene2 -0.16867848 17.35312 -0.2101962 0.8418116 0.9064321 -4.602487 #> Gene4  0.25314724 17.22803  0.4469408 0.6736126 0.9064321 -4.607448 #> Gene3  0.22700091 17.68798  0.6859200 0.5232677 0.9064321 -4.619125 #> Gene5  0.03126067 17.70526  0.1236196 0.9064321 0.9064321 -4.666733 #> Gene1 -0.11980888 17.91918 -0.9105933 0.4042704 0.9064321 -4.671289"},{"path":"https://xnrxng.github.io/curatoR/articles/curatoR-vignette.html","id":"get_cell_type_file","dir":"Articles","previous_headings":"","what":"10. get_cell_type_file()","title":"curatoR tutorial","text":"function takes raw file wrangles according Gemma needs . function takes 5 parameters: file_path: string contains path raw file. remove_prefix: whether remove barcodes’ prefix. Default FALSE. remove_suffix: whether remove barcodes’ suffix. Defaulst FALSE. id_col: string. can specify column barcodes column one. Default NULL. type_col: string. can specify column cell type column one. Default NULL.","code":""},{"path":"https://xnrxng.github.io/curatoR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rui Xiang Yu. Author, maintainer. Nairuz Elazzabi. Author.","code":""},{"path":"https://xnrxng.github.io/curatoR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xiang Yu R, Elazzabi N (2025). curatoR: Set functions analyzing genetic data, wrangling matrices, curator-specific tasks. R package version 0.0.1, https://github.com/xnrxng/curatoR.","code":"@Manual{,   title = {curatoR: Set of functions for analyzing genetic data, wrangling matrices, and curator-specific tasks},   author = {Rui {Xiang Yu} and Nairuz Elazzabi},   year = {2025},   note = {R package version 0.0.1},   url = {https://github.com/xnrxng/curatoR}, }"},{"path":"https://xnrxng.github.io/curatoR/index.html","id":"curator-","dir":"","previous_headings":"","what":"Set of functions for analyzing genetic data, wrangling matrices, and curator-specific tasks","title":"Set of functions for analyzing genetic data, wrangling matrices, and curator-specific tasks","text":"package curatoR contains functions aimed help analysis genetic data. specifically, aids analysis single-cell RNA sequencing data. However, functions still used general use, wrangling matrices. functions package originated Rui’s project Pavlidis Lab, can found https://github.com/xnrxng/PavlabSZProject/. functions can used curators Pavlidis lab.","code":""},{"path":"https://xnrxng.github.io/curatoR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Set of functions for analyzing genetic data, wrangling matrices, and curator-specific tasks","text":"can install development version curatoR GitHub : :","code":"pak::pak(\"xnrxng/curatoR\") devtools::install_github(\"xnrxng/curatoR\")"},{"path":"https://xnrxng.github.io/curatoR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Set of functions for analyzing genetic data, wrangling matrices, and curator-specific tasks","text":"see functions available use , please refer vignette.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/cleanCtmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a matrix based on expression levels — cleanCtmat","title":"Filter a matrix based on expression levels — cleanCtmat","text":"Filter matrix based expression levels","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/cleanCtmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a matrix based on expression levels — cleanCtmat","text":"","code":"cleanCtmat(ctmat, geneThr = 0.02, sampleThr = 0.05)"},{"path":"https://xnrxng.github.io/curatoR/reference/cleanCtmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a matrix based on expression levels — cleanCtmat","text":"ctmat numeric matrix rows represent genes columns represent samples (e.g., cells). geneThr numeric value 0 1 specifying minimum proportion cells gene must expressed retained. default 0.02. sampleThr numeric value 0 1 specifying minimum rank percentile number genes expressed sample retain sample. default 0.05.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/cleanCtmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a matrix based on expression levels — cleanCtmat","text":"filtered matrix.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/cleanCtmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a matrix based on expression levels — cleanCtmat","text":"","code":"set.seed(123) ctmat <- matrix(sample(c(0, 1, 2, 3), 30, replace = TRUE), nrow = 5, ncol = 6, dimnames = list( paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:6))) cleanCtmat(ctmat) #>       Cell1 Cell2 Cell3 Cell4 Cell6 #> Gene1     2     1     3     2     2 #> Gene2     2     1     1     3     3 #> Gene3     2     1     1     0     1 #> Gene4     1     2     0     2     2 #> Gene5     2     0     1     2     1"},{"path":"https://xnrxng.github.io/curatoR/reference/create_combined_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of matrices with specified barcodes and genes — create_combined_matrix","title":"Get a list of matrices with specified barcodes and genes — create_combined_matrix","text":"Get list matrices specified barcodes genes","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_combined_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of matrices with specified barcodes and genes — create_combined_matrix","text":"","code":"create_combined_matrix(specimenIDs, initial_path)"},{"path":"https://xnrxng.github.io/curatoR/reference/create_combined_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of matrices with specified barcodes and genes — create_combined_matrix","text":"specimenIDs character vector specimen IDs. ID corresponds subdirectory file prefix data directory. initial_path string specifying base path data directory containing subdirectories files specimen. example, files \"data/data_raw/\", initial path.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_combined_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of matrices with specified barcodes and genes — create_combined_matrix","text":"list element sparse matrix. Rows represent genes, columns represent barcodes.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_pseudo_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pseudobulks — create_pseudo_bulk","title":"Create pseudobulks — create_pseudo_bulk","text":"Create pseudobulks","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_pseudo_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pseudobulks — create_pseudo_bulk","text":"","code":"create_pseudo_bulk(expr, meta)"},{"path":"https://xnrxng.github.io/curatoR/reference/create_pseudo_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pseudobulks — create_pseudo_bulk","text":"expr Expression matrix columns cell IDs rows gene names. meta Dataframe row represent cell. Cell IDs rownames. needs columns \"patientID\", \"disorder\", \"sex\", \"age\". \"disorder\" values \"yes\" \"\".","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_pseudo_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pseudobulks — create_pseudo_bulk","text":"list containing pseudobulk matrix metadata.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/create_pseudo_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pseudobulks — create_pseudo_bulk","text":"","code":"set.seed(123) expr <- matrix(sample(0:10, 50, replace = TRUE), nrow = 5, ncol = 10, dimnames = list(paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:10))) meta <- data.frame( patientID = c(\"P1\", \"P2\", \"P3\", \"P1\", \"P1\", \"P2\", \"P2\", \"P3\", \"P3\", \"P1\"), disorder = c(\"yes\", \"no\", \"no\", \"yes\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"yes\"), sex = c(\"male\", \"female\", \"female\", \"male\", \"male\", \"female\", \"female\", \"female\", \"female\", \"male\"), age = c(70, 68, 64, 70, 70, 68, 68, 64, 64, 70), row.names = paste0(\"Cell\", 1:10) )  create_pseudo_bulk(expr, meta) #> $meta #>              group_sample       group patientID disorder    sex age #> 1  patientIDP2:disorderno  disorderno        P2       no female  68 #> 2  patientIDP3:disorderno  disorderno        P3       no female  64 #> 3 patientIDP1:disorderyes disorderyes        P1      yes   male  70 #>  #> $expr #>       patientIDP2:disorderno patientIDP3:disorderno patientIDP1:disorderyes #> Gene1                     22                     25                      26 #> Gene2                     10                     25                      17 #> Gene3                     21                     16                      26 #> Gene4                     19                      9                      19 #> Gene5                     21                     18                      24 #>"},{"path":"https://xnrxng.github.io/curatoR/reference/do_cpm_log.html","id":null,"dir":"Reference","previous_headings":"","what":"CPM normalizes a matrix and log-transforms it — do_cpm_log","title":"CPM normalizes a matrix and log-transforms it — do_cpm_log","text":"CPM normalizes matrix log-transforms ","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/do_cpm_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CPM normalizes a matrix and log-transforms it — do_cpm_log","text":"","code":"do_cpm_log(mtx, log = FALSE)"},{"path":"https://xnrxng.github.io/curatoR/reference/do_cpm_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CPM normalizes a matrix and log-transforms it — do_cpm_log","text":"mtx matrix. log TRUE FALSE. Whether log-transform matrix well. Default false.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/do_cpm_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CPM normalizes a matrix and log-transforms it — do_cpm_log","text":"CPM normalized matrix.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/do_cpm_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CPM normalizes a matrix and log-transforms it — do_cpm_log","text":"","code":"#' set.seed(123) ctmat <- matrix(sample(c(0, 1, 2, 3), 30, replace = TRUE), nrow = 5, ncol = 6, dimnames = list( paste0(\"Gene\", 1:5), paste0(\"Cell\", 1:6))) do_cpm_log(ctmat, log = TRUE) #>          Cell1    Cell2    Cell3    Cell4   Cell5    Cell6 #> Gene1  0.00000 12.11077 12.61154 11.61829  0.0000 13.12237 #> Gene2 12.71690 11.41763 11.51294 11.61829 12.7169  0.00000 #> Gene3  0.00000 12.51623 11.51294 12.31144 12.7169  0.00000 #> Gene4 13.41005 12.11077 12.20608 12.31144  0.0000 12.02376 #> Gene5  0.00000 12.51623 12.61154 12.71690 12.7169 12.71690"},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type specific matrices with unique column names — generate_cell_types","title":"Generate cell type specific matrices with unique column names — generate_cell_types","text":"Generate cell type specific matrices unique column names","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type specific matrices with unique column names — generate_cell_types","text":"","code":"generate_cell_types(cell_types, sample_list, prefix)"},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type specific matrices with unique column names — generate_cell_types","text":"cell_types Vector cell types process (e.g., c(\"T_cells\", \"B_cells\")). sample_list List matrices rows genes columns cells. matrix column names indicating cell types. Genes (number order) matrices. prefix Prefix include column names output.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type specific matrices with unique column names — generate_cell_types","text":"list sparse matrices (one cell type cell_types), unique column names shared row names.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type specific matrices with unique column names — generate_cell_types","text":"","code":"sample1 <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"T_cells\", \"B_cells\"))) sample2 <- matrix(c(7, 8, 9, 10, 11, 12), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"T_cells\", \"B_cells\"))) sample_list <- list(sample1, sample2)  cell_types <- c(\"T_cells\", \"B_cells\")  prefix <- \"Sample_\"  generate_cell_types(cell_types, sample_list, prefix) #> $T_cells #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>       Sample_T_cells_Sample1_1 Sample_T_cells_Sample2_2 #> Gene1                        1                        7 #> Gene2                        2                        8 #> Gene3                        3                        9 #>  #> $B_cells #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>       Sample_B_cells_Sample1_1 Sample_B_cells_Sample2_2 #> Gene1                        4                       10 #> Gene2                        5                       11 #> Gene3                        6                       12 #>"},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types_w_barcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","title":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","text":"Generate cell type specific matrices barcodes","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types_w_barcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","text":"","code":"generate_cell_types_w_barcodes(cell_types, sample_list, cell_IDs)"},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types_w_barcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","text":"cell_types Vector cell types process (e.g., c(\"T_cells\", \"B_cells\")). sample_list List matrices rows genes columns cells. matrix column names indicating cell types. Genes (number order) matrices. cell_IDs dataframe two columns: \"cell_type\" \"cell_ID\".","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types_w_barcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","text":"list sparse matrices (one cell type cell_types), cell IDs column names shared row names.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/generate_cell_types_w_barcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cell type specific matrices with barcodes — generate_cell_types_w_barcodes","text":"","code":"cell_IDs <- data.frame( cell_type = c(\"T_cells\", \"B_cells\", \"T_cells\", \"B_cells\", \"T_cells\", \"T_cells\", \"B_cells\", \"B_cells\"), cell_ID = c(\"Cell1\", \"Cell2\", \"Cell3\", \"Cell4\", \"Cell5\", \"Cell6\", \"Cell7\", \"Cell8\"))  sample1 <- matrix( c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"Cell1\", \"Cell2\", \"Cell3\", \"Cell4\")))  sample2 <- matrix( c(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), nrow = 3, dimnames = list(c(\"Gene1\", \"Gene2\", \"Gene3\"), c(\"Cell5\", \"Cell6\", \"Cell7\", \"Cell8\"))) sample_list <- list(sample1, sample2) cell_types <- c(\"T_cells\", \"B_cells\") generate_cell_types_w_barcodes(cell_types, sample_list, cell_IDs) #> $T_cells #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>       Cell1 Cell3 Cell5 Cell6 #> Gene1     1     7    13    16 #> Gene2     2     8    14    17 #> Gene3     3     9    15    18 #>  #> $B_cells #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>       Cell2 Cell4 Cell7 Cell8 #> Gene1     4    10    19    22 #> Gene2     5    11    20    23 #> Gene3     6    12    21    24 #>"},{"path":"https://xnrxng.github.io/curatoR/reference/get_cell_type_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cleaned cell type annotations — get_cell_type_file","title":"Get cleaned cell type annotations — get_cell_type_file","text":"Get cleaned cell type annotations","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/get_cell_type_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cleaned cell type annotations — get_cell_type_file","text":"","code":"get_cell_type_file(   input,   remove_prefix = FALSE,   remove_suffix = FALSE,   id_col = NULL,   type_col = NULL,   sample_col = NULL )"},{"path":"https://xnrxng.github.io/curatoR/reference/get_cell_type_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cleaned cell type annotations — get_cell_type_file","text":"input string denotes file , data frame. remove_prefix TRUE FALSE. Whether remove barcodes' prefix. remove_suffix TRUE FALSE. Whether remove barcodes' suffix. id_col name barcodes column. type_col name cell type column. sample_col name sample IDs column. Optional.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/get_cell_type_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cleaned cell type annotations — get_cell_type_file","text":"cleaned data table two columns, cell_id cell_type. Optionally third column, sample_id.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/limma_dge.html","id":null,"dir":"Reference","previous_headings":"","what":"CPMLog normalize and perform DEA — limma_dge","title":"CPMLog normalize and perform DEA — limma_dge","text":"CPMLog normalize perform DEA","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/limma_dge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CPMLog normalize and perform DEA — limma_dge","text":"","code":"limma_dge(design, PB)"},{"path":"https://xnrxng.github.io/curatoR/reference/limma_dge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CPMLog normalize and perform DEA — limma_dge","text":"design specify groups interest. E.g. design <- model.matrix(~ group, data = PB$meta) PB output create_pseudobulk.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/limma_dge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CPMLog normalize and perform DEA — limma_dge","text":"results DEA limma package.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/load_w_new_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Load dataset with new column names — load_w_new_col","title":"Load dataset with new column names — load_w_new_col","text":"Given URL online dataset, datasets' delimiters, vector new column names, loads dataset tibble new column names.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/load_w_new_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load dataset with new column names — load_w_new_col","text":"","code":"load_w_new_col(dataset_path, col_names, delimiter)"},{"path":"https://xnrxng.github.io/curatoR/reference/load_w_new_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load dataset with new column names — load_w_new_col","text":"dataset_path URL path leads dataset. col_names Vector new column names strings (quoted). delimiter dataset's delimiter (\".\", \";\", \",\", etc), quoted.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/load_w_new_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load dataset with new column names — load_w_new_col","text":"Loaded dataset new column names, tibble.","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/load_w_new_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load dataset with new column names — load_w_new_col","text":"","code":"load_w_new_col(\"https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv\", c(\"model\", \"milespergallon\", \"cylinder_number\", \"displacement\", \"horsepower\", \"rear_axle_ratio\", \"weight\", \"quartermiletime\", \"engine\", \"transmission\", \"forwardgears\", \"carb\"), \",\") #> Rows: 32 Columns: 12 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): manufacturer #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>    model  milespergallon cylinder_number displacement horsepower rear_axle_ratio #>    <chr>           <dbl>           <dbl>        <dbl>      <dbl>           <dbl> #>  1 Mazda…           21                 6         160         110            3.9  #>  2 Mazda…           21                 6         160         110            3.9  #>  3 Datsu…           22.8               4         108          93            3.85 #>  4 Horne…           21.4               6         258         110            3.08 #>  5 Horne…           18.7               8         360         175            3.15 #>  6 Valia…           18.1               6         225         105            2.76 #>  7 Duste…           14.3               8         360         245            3.21 #>  8 Merc …           24.4               4         147.         62            3.69 #>  9 Merc …           22.8               4         141.         95            3.92 #> 10 Merc …           19.2               6         168.        123            3.92 #> # ℹ 22 more rows #> # ℹ 6 more variables: weight <dbl>, quartermiletime <dbl>, engine <dbl>, #> #   transmission <dbl>, forwardgears <dbl>, carb <dbl>"},{"path":"https://xnrxng.github.io/curatoR/reference/perform_DGE.html","id":null,"dir":"Reference","previous_headings":"","what":"TMM Normalize and perform DEA — perform_DGE","title":"TMM Normalize and perform DEA — perform_DGE","text":"TMM Normalize perform DEA","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/perform_DGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TMM Normalize and perform DEA — perform_DGE","text":"","code":"perform_DGE(PB, design)"},{"path":"https://xnrxng.github.io/curatoR/reference/perform_DGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TMM Normalize and perform DEA — perform_DGE","text":"PB output create_pseudobulk. design specify groups interest. E.g. design <- model.matrix(~ group, data = PB$meta)","code":""},{"path":"https://xnrxng.github.io/curatoR/reference/perform_DGE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TMM Normalize and perform DEA — perform_DGE","text":"results DEA edgeR package.","code":""}]
